Python:
1. The purpose of "pass":
Python has the syntactical requirement that code blocks (after if, except,
def, class etc.) cannot be empty. So if nothing is supposed to happen in a
code block, a pass is needed for such a block to not produce an "IndentationError".
2. iPython: "_":
Use _ for a variable containing the result of the last executed command.
In [1]: 9 * 54
Out[1]: 486

In [2]: _
Out[2]: 486

In [3]: x = _

In [4]: x
Out[4]: 486
3. Generator
1) For list looping:
range() vs <Generator>xrange()
Since xrange() only provides the next element, the use case is: need to access only one element at a time in order
BUT, if un-ordered access is needed, or multiple elements are accessed at
the same time, Generator cannot do
2) For dictionary looping:
items() vs <Generator>iteritems()
4. Get list index while looping:
for i, item in enumerate(L):
    print i, item
(using i in xrange(len(L)) is bad practice)
5. zip():
first_names = ['Giovanna', 'Ryan', 'Jon']
last_names = ['Thron', 'Orban', 'Dinu']
zip(first_names, last_names)
Output: [('Giovanna', 'Thron'), ('Ryan', 'Orban'), ('Jon', 'Dinu')]
6. If statements in list comprehensions:
1)
In [3]: L = [4, 6, 3, 2, 5]

In [4]: ["even" if item % 2 == 0 else "odd" for item in L]
Out[4]: ['even', 'even', 'odd', 'even', 'odd']
2) as a filter:
In [5]: L = [4, 6, 3, 2, 5]

In [6]: [item for item in L if item % 2 == 0]
Out[6]: [4, 6, 2]
7. Lambda:
list comprehension = map+lambda (they can do the same thing)
8. Dictionary:
1) Due to how a dictionary is stored (Dictionaries are an
implementation of hash tables, like Java's hashmaps), there is no concept
of order for elements in a dictionary
2) Dict keys are not mutable
3) Looping through a dictinary:
- for k in d:
- for k, v in d.iteritems():
4) Counter and defaultdict:
Counter and defaultdict have default values for keys that haven't been seen
before. For a Counter, the default value will be 0. For a defaultdict, the
default value will be dependent on what you give it.
In [1]: from collections import Counter, defaultdict

In [2]: c = Counter()

In [3]: c['abc']
Out[3]: 0

In [4]: d = defaultdict(str)

In [5]: d['abc']
Out[5]: ''
9. Sets:
Sets are basically value-less dictionaries. If you have a list that you're going
to be regularly checking membership of, you should be using a set.
A set is also unordered.
10. Mutable objects:
-list
-set
-dictionary
When passing a mutable object into a function, if the parameter is modified in the
function, the original mutable object will also be modified!
11. Keyword arguments:
def hello_word(name, mood='happy'):
  return "Hello word, I am {0} and I am feeling {1}.".format(name, mood)

print hello_word('John')
print hello_word('Chen', 'on top of the world')
12. sys.argv:
sys.argv is automatically a list of strings representing the arguments
(as separated by spaces) on the command-line.

from __future__ import print_function
import sys
print(sys.argv, len(sys.argv))

> python print_args.py
out> ['print_args.py'] 1

> python print_args.py foo and bar
out> ['print_args.py', 'foo', 'and', 'bar'] 4

> python print_args.py "foo and bar"
out> ['print_args.py', 'foo and bar'] 2

> python print_args.py "foo and bar" and baz
out> ['print_args.py', 'foo and bar', 'and', 'baz'] 4

13. strip():
The method strip() returns a copy of the string in which
all chars have been stripped from the beginning and the end
of the string (default whitespace characters).
Also:
"The cat, chased the dog don't.".strip().strip(string.punctuation)
14. Object-oriented:
To combine data structures and functions together.
15. Class:
class Shape:

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.description = "This shape has not been described yet"
        self.author = "Nobody has claimed to make this shape yet"

    def area(self):
        return self.x * self.y

    def perimeter(self):
        return 2 * self.x + 2 * self.y

    def describe(self, text):
        self.description = text

    def authorName(self, text):
        self.author = text

    def scaleSize(self, scale):
        self.x = self.x * scale
        self.y = self.y * scale
- "__init__" is run when we create an instance of Shape
- "self" is how we refer to things in the class from within itself. self is the
first parameter in any function defined inside a class. Any function or variable
created on the first level of indentation (that is, lines of code that start one
TAB to the right of where we put class Shape) is automatically put into self. To
access these functions and variables elsewhere inside the class, their name must
be preceeded with self and a full-stop (e.g. self.variable_name).
